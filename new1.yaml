name: Apigee Hybrid - Create Org (Data Residency, Debug Safe)

on:
  workflow_dispatch:
    inputs:
      apigee_project:
        description: "GCP Project ID for Apigee Org"
        required: true
        default: "eqx-entapg-nonprod"
      control_plane_location:
        description: "Control Plane Region (e.g. us)"
        required: true
        default: "us"
      consumer_data_region:
        description: "Consumer Data Region (e.g. us-west1)"
        required: true
        default: "us-west1"
      runtime_type:
        description: "Runtime Type"
        required: true
        default: "HYBRID"
      billing_type:
        description: "Billing Type"
        required: true
        default: "SUBSCRIPTION"

jobs:
  apigee-org:
    runs-on: ubuntu-latest

    env:
      APIGEE_PROJECT: ${{ github.event.inputs.apigee_project }}
      CONTROL_PLANE_LOCATION: ${{ github.event.inputs.control_plane_location }}
      CONSUMER_DATA_REGION: ${{ github.event.inputs.consumer_data_region }}
      RUNTIMETYPE: ${{ github.event.inputs.runtime_type }}
      BILLING_TYPE: ${{ github.event.inputs.billing_type }}
      ORG_NAME: ${{ github.event.inputs.apigee_project }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install jq & curl
        run: sudo apt-get update -y && sudo apt-get install -y jq curl

      - name: Generate Access Token
        id: token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # -------------------------------------------------------------------
      # VALIDATE EXISTING ORG
      # -------------------------------------------------------------------
      - name: Validate Existing Organization
        id: validate_org
        run: |
          echo "üîç Checking if Apigee Org '${ORG_NAME}' already exists..."
          RESP=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}")
          BODY=$(echo "$RESP" | head -n1)
          CODE=$(echo "$RESP" | tail -n1)
          echo "HTTP $CODE"
          if [ "$CODE" -eq 200 ]; then
            echo "‚úÖ Org '${ORG_NAME}' already exists. Skipping creation."
            echo "org_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è Org not found, proceeding with creation."
            echo "org_exists=false" >> $GITHUB_OUTPUT
          fi

      # -------------------------------------------------------------------
      # CREATE ORG (WITH FULL DEBUG LOGGING)
      # -------------------------------------------------------------------
      - name: Create Apigee Organization (Data Residency, Debug)
        if: steps.validate_org.outputs.org_exists == 'false'
        id: create_org
        run: |
          echo "üöÄ Creating Apigee Organization..."
          echo "Control Plane: ${CONTROL_PLANE_LOCATION}"
          echo "Consumer Region: ${CONSUMER_DATA_REGION}"
          echo "Project: ${APIGEE_PROJECT}"
          echo "----------------------------------------------------"
          echo "üì¶ Payload being sent:"
          echo "{
            \"name\": \"${ORG_NAME}\",
            \"billingType\": \"${BILLING_TYPE}\",
            \"runtimeType\": \"${RUNTIMETYPE}\",
            \"apiConsumerDataLocation\": \"${CONSUMER_DATA_REGION}\"
          }"
          echo "----------------------------------------------------"

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"${ORG_NAME}\",
              \"billingType\": \"${BILLING_TYPE}\",
              \"runtimeType\": \"${RUNTIMETYPE}\",
              \"apiConsumerDataLocation\": \"${CONSUMER_DATA_REGION}\"
            }" \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations?parent=projects/${APIGEE_PROJECT}")

          BODY=$(echo "$RESPONSE" | head -n1)
          CODE=$(echo "$RESPONSE" | tail -n1)
          echo "HTTP Status: $CODE"
          echo "Raw Response:"
          echo "$BODY" | head -c 4000
          echo "----------------------------------------------------"

          if [ "$CODE" -ge 400 ]; then
            echo "‚ùå Org creation failed with HTTP $CODE"
            echo "Attempting to parse JSON error (if present)..."
            echo "$BODY" | jq . || echo "$BODY"
            exit 1
          fi

          LONG_OP=$(echo "$BODY" | jq -r '.name' | awk -F'/' '{print $4}')
          if [[ -z "$LONG_OP" || "$LONG_OP" == "null" ]]; then
            echo "‚ö†Ô∏è Could not parse operation ID."
            echo "$BODY" | jq . || echo "$BODY"
            exit 1
          fi
          echo "operation_id=$LONG_OP" >> $GITHUB_OUTPUT
          echo "‚úÖ Operation ID: $LONG_OP"

      # -------------------------------------------------------------------
      # WAIT FOR OPERATION
      # -------------------------------------------------------------------
      - name: Wait for Organization Creation
        if: steps.validate_org.outputs.org_exists == 'false'
        run: |
          echo "‚è≥ Waiting for Apigee org creation..."
          for i in {1..20}; do
            STATUS=$(curl -s \
              -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
              "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}/operations/${{ steps.create_org.outputs.operation_id }}" \
              | jq -r '.metadata.state // empty')
            echo "Attempt $i: $STATUS"
            [[ "$STATUS" == "FINISHED" || "$STATUS" == "SUCCESS" ]] && echo "‚úÖ Completed." && break
            [[ "$STATUS" == "FAILED" ]] && echo "‚ùå Failed." && exit 1
            sleep 30
          done

      # -------------------------------------------------------------------
      # VERIFY ORG
      # -------------------------------------------------------------------
      - name: Verify Organization
        run: |
          echo "üìã Checking final org status..."
          curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}" | jq .
