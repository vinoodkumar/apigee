name: Apigee Hybrid - Create Org & Env Group (Validated with Error Capture)

on:
  workflow_dispatch:
    inputs:
      apigee_project:
        description: "Project ID where Apigee Org will be created (e.g. eqx-entapg-nonprod)"
        required: true
      analytics_region:
        description: "Analytics Region (e.g. us-central1)"
        required: true
      runtime_type:
        description: "Runtime Type (HYBRID)"
        default: "HYBRID"
        required: true
      env_group_name:
        description: "Name of Apigee Environment Group"
        required: true
      host_name:
        description: "Host name for the environment group (e.g. api.nonprod.example.com)"
        required: true

jobs:
  apigee-org-envgroup:
    runs-on: ubuntu-latest
    env:
      APIGEE_PROJECT: ${{ github.event.inputs.apigee_project }}
      ANALYTICS_REGION: ${{ github.event.inputs.analytics_region }}
      RUNTIMETYPE: ${{ github.event.inputs.runtime_type }}
      ORG_NAME: ${{ github.event.inputs.apigee_project }}
      ENV_GROUP: ${{ github.event.inputs.env_group_name }}
      HOSTNAME: ${{ github.event.inputs.host_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.APIGEE_PROJECT }}
          export_default_credentials: true

      - name: Generate Access Token
        id: token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # ------------------------------------------------------------
      # Helper Function: Unified API Caller with Error Logging
      # ------------------------------------------------------------
      - name: Define API Helper
        id: define_helper
        run: |
          cat <<'EOF' > api_helper.sh
          #!/bin/bash
          set -e

          METHOD=$1
          URL=$2
          DATA=$3
          TOKEN=$4

          echo "📡 Calling: $METHOD $URL"
          if [ -n "$DATA" ]; then
            echo "Request body: $DATA"
            RESPONSE=$(curl -s -X "$METHOD" -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" -d "$DATA" "$URL" -w "\n%{http_code}")
          else
            RESPONSE=$(curl -s -X "$METHOD" -H "Authorization: Bearer $TOKEN" "$URL" -w "\n%{http_code}")
          fi

          BODY=$(echo "$RESPONSE" | head -n1)
          CODE=$(echo "$RESPONSE" | tail -n1)

          echo "--------------------"
          echo "HTTP Status: $CODE"
          echo "Full API Response:"
          echo "$BODY" | jq .
          echo "--------------------"

          if [ "$CODE" -ge 400 ]; then
            MESSAGE=$(echo "$BODY" | jq -r '.error.message // "Unknown error"')
            echo "❌ API call failed with HTTP $CODE"
            echo "Error: $MESSAGE"
            exit 1
          fi

          echo "$BODY" > response.json
          EOF

          chmod +x api_helper.sh

      # ------------------------------------------------------------
      # STEP 2 : CREATE APIGEE ORGANIZATION
      # ------------------------------------------------------------
      - name: Check if Org Already Exists
        id: check_org
        run: |
          ./api_helper.sh GET "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}" "" "${{ steps.token.outputs.token }}" || true
          if grep -q '"error"' response.json; then
            echo "org_exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No existing Apigee organization found. Proceeding with creation."
          else
            echo "org_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Organization ${ORG_NAME} already exists. Skipping creation."
          fi

      - name: Create Apigee Organization
        if: steps.check_org.outputs.org_exists == 'false'
        id: create_org
        run: |
          DATA=$(cat <<EOF
          {
            "name": "${ORG_NAME}",
            "runtimeType": "${RUNTIMETYPE}",
            "analyticsRegion": "${ANALYTICS_REGION}"
          }
          EOF
          )
          ./api_helper.sh POST "https://apigee.googleapis.com/v1/organizations?parent=projects/${APIGEE_PROJECT}" "$DATA" "${{ steps.token.outputs.token }}"

          LONG_OP=$(jq -r '.name' response.json | awk -F'/' '{print $4}')
          echo "operation_id=$LONG_OP" >> $GITHUB_OUTPUT

      - name: Wait for Org Creation
        if: steps.check_org.outputs.org_exists == 'false'
        run: |
          echo "⏳ Waiting for organization creation to complete..."
          for i in {1..20}; do
            ./api_helper.sh GET "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/operations/${{ steps.create_org.outputs.operation_id }}" "" "${{ steps.token.outputs.token }}" || true
            STATUS=$(jq -r '.metadata.state // empty' response.json)
            echo "Attempt $i: $STATUS"
            if [[ "$STATUS" == "FINISHED" || "$STATUS" == "SUCCESS" ]]; then
              echo "✅ Organization creation completed."
              break
            fi
            sleep 30
          done

      - name: Verify Organization
        run: |
          ./api_helper.sh GET "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}" "" "${{ steps.token.outputs.token }}"

      # ------------------------------------------------------------
      # STEP 3 : CREATE ENVIRONMENT GROUP
      # ------------------------------------------------------------
      - name: Check if Environment Group Exists
        id: check_envgroup
        run: |
          ./api_helper.sh GET "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups/${ENV_GROUP}" "" "${{ steps.token.outputs.token }}" || true
          if grep -q '"error"' response.json; then
            echo "envgroup_exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No existing environment group found. Proceeding with creation."
          else
            echo "envgroup_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Environment group ${ENV_GROUP} already exists. Skipping creation."
          fi

      - name: Create Environment Group
        if: steps.check_envgroup.outputs.envgroup_exists == 'false'
        run: |
          DATA=$(cat <<EOF
          {
            "name": "${ENV_GROUP}",
            "hostnames": ["${HOSTNAME}"]
          }
          EOF
          )
          ./api_helper.sh POST "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups" "$DATA" "${{ steps.token.outputs.token }}"

      - name: Verify Environment Group
        run: |
          ./api_helper.sh GET "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups/${ENV_GROUP}" "" "${{ steps.token.outputs.token }}"
