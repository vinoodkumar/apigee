name: Apigee Hybrid - Create Org & Env Group

on:
  workflow_dispatch:
    inputs:
      apigee_project:
        description: "Project ID where Apigee Org will be created (e.g. eq-nonprod)"
        required: true
        default: 'eqx-entapg-nonprod'
      cluster_project:
        description: "Project ID where GKE cluster exists (e.g. helix)"
        required: true
        default: 'helix-apigee-nprd'
      analytics_region:
        description: "Analytics Region (e.g. us-central1)"
        required: true
        default: 'us-west1'
      runtime_type:
        description: "Runtime Type (HYBRID)"
        default: "HYBRID"
        required: true
      # env_group_name:
      #   description: "Name of Apigee Environment Group"
      #   required: true
      #   default: ''
      # host_name:
      #   description: "Host name for the environment group (e.g. api.nonprod.example.com)"
      #   required: true
      #   default: ''

jobs:
  apigee-org:
    runs-on: ${{ github.event.inputs.ENVIRONMENT == 'prod' && 'prod_infra_boomi' || 'apigee_np' }}

    env:
      APIGEE_PROJECT: ${{ github.event.inputs.apigee_project }}
      CLUSTER_PROJECT: ${{ github.event.inputs.cluster_project }}
      ANALYTICS_REGION: ${{ github.event.inputs.analytics_region }}
      RUNTIMETYPE: ${{ github.event.inputs.runtime_type }}
      ORG_NAME: ${{ github.event.inputs.apigee_project }}
      # ENV_GROUP: ${{ github.event.inputs.env_group_name }}
      # HOSTNAME: ${{ github.event.inputs.host_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Generate Access Token
        id: token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # ------------------------------------------------------------
      # VALIDATE PROJECT ENTITLEMENT AND EXISTING ORG
      # ------------------------------------------------------------
      - name: Validate Apigee Entitlement and Org Existence
        id: validate_org
        run: |
          echo "üîç Validating Apigee entitlement and existing organization for project ${APIGEE_PROJECT}"

          EXISTING_ORG=$(curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}" | jq -r '.name' 2>/dev/null || echo "")

          if [[ "$EXISTING_ORG" == "$ORG_NAME" ]]; then
            echo "‚úÖ Organization '${ORG_NAME}' already exists. Skipping creation."
            echo "org_exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          ENTITLEMENT_CHECK=$(gcloud alpha apigee organizations describe ${ORG_NAME} --project ${APIGEE_PROJECT} 2>&1 || true)
          if echo "$ENTITLEMENT_CHECK" | grep -qi "does not have an Apigee entitlement"; then
            echo "‚ùå Project ${APIGEE_PROJECT} is not Apigee-entitled. Contact Google Cloud Sales."
            exit 1
          fi

          echo "org_exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No existing Apigee organization found. Proceeding with creation."

      # ------------------------------------------------------------
      # STEP 2 : CREATE APIGEE ORGANIZATION
      # ------------------------------------------------------------
      - name: Create Apigee Organization
  if: steps.validate_org.outputs.org_exists == 'false'
  id: create_org
  run: |
    echo "üöÄ Creating Apigee organization: ${ORG_NAME}"

    RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
      -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
      -H "Content-Type: application/json" \
      -d '{
        "name":"'"${ORG_NAME}"'",
        "runtimeType":"'"${RUNTIMETYPE}"'",
        "analyticsRegion":"'"${ANALYTICS_REGION}"'"
      }' \
      "https://apigee.googleapis.com/v1/organizations?parent=projects/${APIGEE_PROJECT}")

    BODY=$(echo "$RESPONSE" | head -n1)
    CODE=$(echo "$RESPONSE" | tail -n1)

    echo "--------------------"
    echo "HTTP Status: $CODE"
    echo "Raw Response:"
    echo "$BODY"
    echo "--------------------"

    # ‚úÖ Handle known outcomes
    if [ "$CODE" -eq 409 ]; then
      echo "‚úÖ Organization already exists. Skipping creation."
      exit 0
    elif [ "$CODE" -ge 400 ]; then
      echo "‚ùå Org creation failed with HTTP $CODE"
      if echo "$BODY" | jq -e '.error.message' >/dev/null 2>&1; then
        echo "Error details:"
        echo "$BODY" | jq '.error'
      else
        echo "Raw (non-JSON) response:"
        echo "$BODY"
      fi
      exit 1
    fi

    # ‚úÖ Safely extract long-running operation ID
    LONG_OP=$(echo "$BODY" | jq -r '.name' 2>/dev/null | awk -F'/' '{print $4}')

    if [[ -z "$LONG_OP" || "$LONG_OP" == "null" ]]; then
      echo "‚ö†Ô∏è Could not parse long-running operation ID."
      echo "Raw response for debugging:"
      echo "$BODY" | jq . || echo "$BODY"
      exit 1
    fi

    echo "operation_id=$LONG_OP" >> $GITHUB_OUTPUT
    echo "‚úÖ Org creation initiated successfully. Operation ID: $LONG_OP"


      - name: Wait for Organization Creation
        if: steps.validate_org.outputs.org_exists == 'false'
        run: |
          echo "‚è≥ Waiting for organization creation to complete..."
          for i in {1..25}; do
            STATUS=$(curl -s \
              -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
              "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/operations/${{ steps.create_org.outputs.operation_id }}" \
              | grep -o '"state": *"[^"]*"' | awk -F '"' '{print $4}')
            echo "Attempt $i: State=$STATUS"
            if [ "$STATUS" == "FINISHED" ] || [ "$STATUS" == "SUCCESS" ]; then
              echo "‚úÖ Organization creation completed."
              break
            fi
            if [ "$STATUS" == "FAILED" ]; then
              echo "‚ùå Organization creation failed."
              exit 1
            fi
            sleep 30
          done

      - name: Verify Organization
        run: |
          echo "üìã Verifying organization..."
          curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}" | jq .

      # # ------------------------------------------------------------
      # # STEP 3 : CREATE ENVIRONMENT GROUP (WITH VALIDATION)
      # # ------------------------------------------------------------
      # - name: Validate Existing Env Group
      #   id: check_envgroup
      #   run: |
      #     EXISTING_GROUP=$(curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
      #       "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups/${ENV_GROUP}" | jq -r '.name' 2>/dev/null || echo "")

      #     if [[ "$EXISTING_GROUP" == "organizations/${ORG_NAME}/environmentGroups/${ENV_GROUP}" ]]; then
      #       echo "‚úÖ Environment group '${ENV_GROUP}' already exists. Skipping creation."
      #       echo "envgroup_exists=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "envgroup_exists=false" >> $GITHUB_OUTPUT
      #       echo "‚ÑπÔ∏è No existing environment group found. Proceeding with creation."
      #     fi

      # - name: Create Environment Group
      #   if: steps.check_envgroup.outputs.envgroup_exists == 'false'
      #   run: |
      #     echo "üöÄ Creating Environment Group: ${ENV_GROUP}"

      #     RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
      #       -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "name":"'"${ENV_GROUP}"'",
      #         "hostnames":["'"${HOSTNAME}"'"]
      #       }' \
      #       "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups")

      #     BODY=$(echo "$RESPONSE" | head -n1)
      #     CODE=$(echo "$RESPONSE" | tail -n1)

      #     if [ "$CODE" -ge 400 ]; then
      #       echo "‚ùå Env group creation failed with HTTP $CODE"
      #       echo "$BODY"
      #       exit 1
      #     fi

      #     echo "‚úÖ Environment group '${ENV_GROUP}' created successfully."

      # - name: Verify Environment Group
      #   run: |
      #     echo "üìã Verifying environment group..."
      #     curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
      #       "https://apigee.googleapis.com/v1/organizations/${ORG_NAME}/environmentGroups/${ENV_GROUP}" | jq .
