name: Apigee Hybrid - Create Org (Data Residency, v1.14 Spec)

on:
  workflow_dispatch:
    inputs:
      apigee_project:
        description: "GCP Project ID for Apigee Org"
        required: true
        default: "eqx-entapg-nonprod"
      control_plane_location:
        description: "Control Plane Region (e.g. us, europe)"
        required: true
        default: "us"
      consumer_data_region:
        description: "Consumer Data Region (e.g. us-west1, europe-west1)"
        required: true
        default: "us-west1"
      runtime_type:
        description: "Runtime Type"
        required: true
        default: "HYBRID"
      billing_type:
        description: "Billing Type"
        required: true
        default: "SUBSCRIPTION"

jobs:
  apigee-org:
    runs-on: ubuntu-latest

    env:
      APIGEE_PROJECT: ${{ github.event.inputs.apigee_project }}
      CONTROL_PLANE_LOCATION: ${{ github.event.inputs.control_plane_location }}
      CONSUMER_DATA_REGION: ${{ github.event.inputs.consumer_data_region }}
      RUNTIMETYPE: ${{ github.event.inputs.runtime_type }}
      BILLING_TYPE: ${{ github.event.inputs.billing_type }}
      ORG_NAME: ${{ github.event.inputs.apigee_project }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Generate Access Token
        id: token
        run: |
          TOKEN=$(gcloud auth print-access-token)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # ------------------------------------------------------------
      # STEP 1: VALIDATE EXISTING ORG
      # ------------------------------------------------------------
      - name: Validate Existing Organization
        id: validate_org
        run: |
          echo "üîç Checking if Apigee Org '${ORG_NAME}' already exists..."
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}")
          BODY=$(echo "$RESPONSE" | head -n1)
          CODE=$(echo "$RESPONSE" | tail -n1)

          if [ "$CODE" -eq 200 ]; then
            echo "‚úÖ Organization '${ORG_NAME}' already exists. Skipping creation."
            echo "org_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No existing organization found. Proceeding with creation."
            echo "org_exists=false" >> $GITHUB_OUTPUT
          fi

      # ------------------------------------------------------------
      # STEP 2: CREATE ORG (DATA RESIDENCY)
      # ------------------------------------------------------------
      - name: Create Apigee Organization (Data Residency)
        if: steps.validate_org.outputs.org_exists == 'false'
        id: create_org
        run: |
          echo "üöÄ Creating Apigee Organization with Data Residency..."
          echo "Control Plane: ${CONTROL_PLANE_LOCATION}, Consumer Region: ${CONSUMER_DATA_REGION}"

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "'"${ORG_NAME}"'",
              "billingType": "'"${BILLING_TYPE}"'",
              "runtimeType": "'"${RUNTIMETYPE}"'",
              "controlPlaneRegion": "'"${CONTROL_PLANE_LOCATION}"'",
              "apiConsumerDataLocation": "'"${CONSUMER_DATA_REGION}"'"
            }' \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations?parent=projects/${APIGEE_PROJECT}")

          BODY=$(echo "$RESPONSE" | head -n1)
          CODE=$(echo "$RESPONSE" | tail -n1)

          echo "--------------------"
          echo "HTTP Status: $CODE"
          echo "Raw Response:"
          echo "$BODY"
          echo "--------------------"

          if [ "$CODE" -eq 409 ]; then
            echo "‚úÖ Organization already exists. Skipping creation."
            exit 0
          elif [ "$CODE" -ge 400 ]; then
            echo "‚ùå Org creation failed with HTTP $CODE"
            if echo "$BODY" | jq -e '.error.message' >/dev/null 2>&1; then
              echo "Error details:"
              echo "$BODY" | jq '.error'
            else
              echo "Raw (non-JSON) response:"
              echo "$BODY"
            fi
            exit 1
          fi

          LONG_OP=$(echo "$BODY" | jq -r '.name' 2>/dev/null | awk -F'/' '{print $4}')

          if [[ -z "$LONG_OP" || "$LONG_OP" == "null" ]]; then
            echo "‚ö†Ô∏è Could not parse long-running operation ID."
            echo "$BODY" | jq . || echo "$BODY"
            exit 1
          fi

          echo "operation_id=$LONG_OP" >> $GITHUB_OUTPUT
          echo "‚úÖ Org creation initiated successfully. Operation ID: $LONG_OP"

      # ------------------------------------------------------------
      # STEP 3: WAIT FOR CREATION COMPLETION
      # ------------------------------------------------------------
      - name: Wait for Organization Creation
        if: steps.validate_org.outputs.org_exists == 'false'
        run: |
          echo "‚è≥ Waiting for organization creation to complete..."
          for i in {1..30}; do
            STATUS=$(curl -s \
              -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
              "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}/operations/${{ steps.create_org.outputs.operation_id }}" \
              | jq -r '.metadata.state // empty')

            echo "Attempt $i: State=$STATUS"
            if [[ "$STATUS" == "FINISHED" || "$STATUS" == "SUCCESS" ]]; then
              echo "‚úÖ Organization creation completed."
              break
            fi
            if [[ "$STATUS" == "FAILED" ]]; then
              echo "‚ùå Organization creation failed."
              exit 1
            fi
            sleep 30
          done

      # ------------------------------------------------------------
      # STEP 4: VERIFY ORGANIZATION
      # ------------------------------------------------------------
      - name: Verify Organization
        run: |
          echo "üìã Verifying Apigee Organization..."
          ORG_INFO=$(curl -s -H "Authorization: Bearer ${{ steps.token.outputs.token }}" \
            "https://${CONTROL_PLANE_LOCATION}-apigee.googleapis.com/v1/organizations/${ORG_NAME}")

          if echo "$ORG_INFO" | jq -e '.subscriptionType' >/dev/null 2>&1; then
            echo "‚úÖ Organization details:"
            echo "$ORG_INFO" | jq '{name, runtimeType, billingType, subscriptionType, controlPlaneRegion, apiConsumerDataLocation, state}'
            SUB_TYPE=$(echo "$ORG_INFO" | jq -r '.subscriptionType')
            if [ "$SUB_TYPE" = "EVAL" ]; then
              echo "‚ö†Ô∏è Warning: This is a Trial (EVAL) org. Ensure entitlement is active for Paid Hybrid."
            else
              echo "‚úÖ Organization is Paid (Hybrid-enabled)."
            fi
          else
            echo "‚ùå Could not verify organization info."
            echo "$ORG_INFO"
            exit 1
          fi
